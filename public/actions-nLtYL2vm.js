import{$ as U,x as l,e_ as y,eq as f,eZ as v,z as M,fc as u}from"./index-cZ9AAHAN.js";const B=12,w=16;function C(a,e){return a.length===e.length&&a.every((o,t)=>o===e[t])}const h=1e5;async function P(a,e){const t=new TextEncoder().encode(a);a="";const i=await crypto.subtle.importKey("raw",t,{name:"PBKDF2"},!1,["deriveBits"]),d=await crypto.subtle.deriveBits({name:"PBKDF2",salt:e,iterations:h,hash:"SHA-256"},i,256);return new Uint8Array(d)}async function m(a,e){const t=new TextEncoder().encode(a);a="";const i=await crypto.subtle.importKey("raw",t,{name:"PBKDF2"},!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:e,iterations:h,hash:"SHA-256"},i,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}async function S(a){const e=crypto.getRandomValues(new Uint8Array(w)),o=crypto.getRandomValues(new Uint8Array(w)),t=await m(a,e),i=await P(a,o);return a="",{verificationHash:i,verificationSalt:o,encryptionSalt:e,encryptionKey:t}}function D(){const{rootScope:a,apiManagerProxy:e}=U();async function o(){u.temporarilyToggle(!1),await e.invoke("toggleCacheStorage",!1),await e.serviceMessagePort.invoke("toggleCacheStorage",!1)}async function t(){u.temporarilyToggle(!0),await e.invoke("toggleCacheStorage",!0),await e.serviceMessagePort.invoke("toggleCacheStorage",!0)}async function i(){await u.clearEncryptableStorages()}async function d(s){const{verificationHash:n,verificationSalt:c,encryptionSalt:p,encryptionKey:r}=await S(s);s="",await l.set({passcode:{verificationHash:n,verificationSalt:c,encryptionSalt:p}}),await a.managers.appStateManager.setByKey(f("settings","passcode","enabled"),!0),await o(),await i();const g={isUsingPasscode:!0,encryptionKey:r};await e.invoke("toggleUsingPasscode",g),await e.serviceMessagePort.invoke("toggleUsingPasscode",g),a.dispatchEvent("toggle_using_passcode",!0),v.resolveDeferred(!0),y.save(r),await t(),await M.updateStorageForLegacy(null)}async function K(s){const n=await l.get("passcode",!1);if(!n?.verificationHash||!n?.verificationSalt)return!1;const c=await P(s,n.verificationSalt);return s="",C(c,n.verificationHash)}async function k(){a.managers.appStateManager.setByKey(f("settings","passcode","enabled"),!1),a.dispatchEvent("toggle_using_passcode",!1),await o(),await i(),await e.invoke("toggleUsingPasscode",{isUsingPasscode:!1}),await e.serviceMessagePort.invoke("toggleUsingPasscode",{isUsingPasscode:!1}),y.save(null),v.resolveDeferred(!1),await t(),l.delete("passcode")}async function E(s){const{verificationHash:n,verificationSalt:c,encryptionSalt:p,encryptionKey:r}=await S(s);s="";const g={verificationHash:n,verificationSalt:c,encryptionSalt:p};await o(),await i(),await e.invoke("changePasscode",{toStore:g,encryptionKey:r}),await e.serviceMessagePort.invoke("saveEncryptionKey",r),y.save(r),await t(),await l.set({passcode:g},!0)}async function A(s){const n=await l.get("passcode",!1);if(!n?.encryptionSalt)throw new Error("No encryption salt found in storage");const c=await m(s,n.encryptionSalt);s="",y.save(c),await e.invoke("saveEncryptionKey",c),await e.serviceMessagePort.invoke("toggleUsingPasscode",{isUsingPasscode:!0,encryptionKey:c}),e.invokeVoid("toggleLockOthers",!1),a.dispatchEvent("toggle_locked",!1)}return{enablePasscode:d,isMyPasscode:K,disablePasscode:k,changePasscode:E,unlockWithPasscode:A}}export{B as M,D as u};
//# sourceMappingURL=actions-nLtYL2vm.js.map
