{"version":3,"file":"starsRangeInput-Cbw05tYn.js","sources":["../src/components/sidebarLeft/tabs/privacy/messages/starsRangeInput.tsx"],"sourcesContent":["import {Component, createMemo} from 'solid-js';\n\nimport {numberThousandSplitterForStars} from '../../../../../helpers/number/numberThousandSplitter';\nimport accumulate from '../../../../../helpers/array/accumulate';\nimport clamp from '../../../../../helpers/number/clamp';\nimport nMap from '../../../../../helpers/number/nMap';\nimport {i18n} from '../../../../../lib/langPack';\n\nimport styles from './starsRangeInput.module.scss';\n\n\nconst starsPerUnits: [units: number, stars: number][] = [\n  [10, 1], // 1 star per unit until 10\n  [10, 2], // 2 stars per unit until 30\n  [14, 5], // 5 stars per unit until 100\n  [10, 10], // 10 stars per unit until 200\n  [12, 25], // 25 stars per unit until 500\n  [10, 50], // 50 stars per unit until 1.000\n  [15, 100], // 100 stars per unit until 2.500\n  [20, 250], // 250 stars per unit until 7.500\n  [5, 500] // 500 stars per unit until 10.000\n]; // 106 total units, try to be something close to 100\n\nconst totalUnits = accumulate(starsPerUnits.map(v => v[0]), 0);\nconst totalStars = unitsToStars(totalUnits);\n\nfunction unitsToStars(units: number) {\n  let stars = 0;\n\n  for(const [u, s] of starsPerUnits) {\n    stars += Math.min(units, u) * s;\n    units -= u;\n\n    if(units <= 0) break;\n  }\n\n  return stars;\n}\n\nfunction starsToUnits(stars: number) {\n  let units = 0;\n\n  for(const [u, s] of starsPerUnits) {\n    const v = Math.min(u, Math.floor(stars / s));\n\n    stars -= v * s;\n    units += v;\n  }\n\n  return units;\n}\n\nconst StarRangeInput: Component<{\n  value: number;\n  onChange: (value: number) => void;\n  startFromZero?: boolean;\n}> = (props) => {\n  const min = createMemo(() => props.startFromZero ? 0 : 1);\n\n  const units = () => clamp(starsToUnits(props.value), min(), totalUnits);\n\n  const normalizedValue = () => nMap(units(), min(), totalUnits, 0, 1);\n\n  const onInput = (e: InputEvent & { currentTarget: HTMLInputElement }) => {\n    const clampedValue = clamp(e.currentTarget.valueAsNumber, min(), totalUnits)\n    const newValue = Math.round(unitsToStars(clampedValue));\n\n    props.onChange(newValue);\n  }\n\n  return (\n    <div\n      class={styles.Container}\n      style={{\n        '--normalized': normalizedValue(),\n        '--w': normalizedValue() * 100 + '%'\n      }}\n    >\n      <div class={styles.Row}>\n        <div class={styles.Limit}>{min()}</div>\n        <div class={styles.Value}>{i18n('Stars', [\n          numberThousandSplitterForStars(parseInt(props.value.toFixed(0)))\n        ])}</div>\n        <div class={`${styles.Limit} ${styles.LimitLast}`}>{numberThousandSplitterForStars(totalStars)}</div>\n      </div>\n      <div class={styles.InputWrapper}>\n        <input\n          type=\"range\"\n          min={min()}\n          max={totalUnits}\n          step={1}\n          value={units()}\n          onInput={onInput}\n        />\n        <div class={styles.Background} />\n        <div class={styles.Thumb} />\n        <div class={styles.Progress} />\n      </div>\n    </div>\n  );\n}\n\nexport default StarRangeInput;\n\n\n/*\n// Snippet to adjust stars per unit\n\nlet a = [\n  [10, 1],\n  [10, 2],\n  [14, 5],\n  [10, 10],\n  [12, 25],\n  [10, 50],\n  [15, 100],\n  [20, 250],\n  [5, 500]\n]\n\nlet c = 0;\nlet tu = 0;\nfor (const [u, s] of a) {\n  c += u * s;\n  tu += u;\n  console.log('tu, s, c', tu, s, c);\n}\n*/\n"],"names":["starsPerUnits","totalUnits","accumulate","map","v","totalStars","unitsToStars","units","stars","u","s","Math","min","starsToUnits","floor","StarRangeInput","props","createMemo","startFromZero","clamp","value","normalizedValue","nMap","onInput","e","clampedValue","currentTarget","valueAsNumber","newValue","round","onChange","_el$","_tmpl$","_el$2","firstChild","_el$3","_el$4","nextSibling","_el$5","_el$6","_el$7","_el$8","_el$9","_el$10","_$insert","i18n","numberThousandSplitterForStars","parseInt","toFixed","$$input","_$setAttribute","_$effect","_p$","_v$","styles","Container","_v$2","_v$3","_v$4","Row","_v$5","Limit","_v$6","Value","_v$7","LimitLast","_v$8","InputWrapper","_v$9","_v$10","Background","_v$11","Thumb","_v$12","Progress","_$className","t","style","setProperty","removeProperty","a","o","i","n","h","r","d","l","undefined","_$delegateEvents"],"mappings":"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"}